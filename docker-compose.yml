# /opt/docker-stack/docker-compose.yml (Multi-Tenant Example)
# Shows setup for BASE services + ONE tenant (tenant1).
# Sections marked with '# --- Tenant Duplication ---' need adaptation for each tenant.

networks:
  proxy:
    name: proxy
    driver: bridge
  backend:
    name: backend
    driver: bridge

volumes:
  # Traefik
  traefik-acme:
  traefik-logs:
  # Keycloak
  keycloak-db-data:
  # Nextcloud (Tenant 1 specific volumes) # --- Tenant Duplication ---
  tenant1-nextcloud-db-data:
  tenant1-nextcloud-data:
  tenant1-nextcloud-custom_apps:
  tenant1-nextcloud-config:
  tenant1-nextcloud-themes:
  # Redis (Shared instance)
  redis-data:
  # OnlyOffice (Shared instance)
  onlyoffice-data:
  onlyoffice-logs:
  # n8n (Shared instance)
  n8n-data:
  # AI Tools
  ollama-data:
  open-webui-data:

services:

  #--------------------------------------------------
  # Traefik (Reverse Proxy)
  #--------------------------------------------------
  traefik:
    image: traefik:v3.1
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-acme:/etc/traefik/acme.json
      - traefik-logs:/var/log/traefik
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - ACME_EMAIL=${ACME_EMAIL}
    command:
      - --api=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --certificatesResolvers.letsencrypt.acme.httpChallenge=true
      - --certificatesResolvers.letsencrypt.acme.httpChallenge.entrypoint=web
      - --certificatesResolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesResolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    labels:
      traefik.enable: "true"
      traefik.http.routers.dashboard.rule: Host(`${TRAEFIK_DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      traefik.http.routers.dashboard.tls: "true"
      traefik.http.routers.dashboard.tls.certresolver: letsencrypt
      traefik.http.routers.dashboard.entrypoints: websecure
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.dashboard.middlewares: myauth
      traefik.http.middlewares.myauth.basicauth.users: "egrist:$$apr1$$MT4dDHgm$$ramWhIiP5KCeEH56W3JlA.,test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/"

  #--------------------------------------------------
  # Keycloak Database (PostgreSQL)
  #--------------------------------------------------
  keycloak-db:
    image: postgres:15-alpine
    container_name: keycloak-db
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - keycloak-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${KEYCLOAK_DB_DATABASE}
      POSTGRES_USER: ${KEYCLOAK_DB_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD}

  #--------------------------------------------------
  # Keycloak (SSO Identity Provider)
  #--------------------------------------------------
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    restart: unless-stopped
    networks:
      - proxy
      - backend
    volumes: [] 
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL_HOST: ${KEYCLOAK_DB_HOST}
      KC_DB_URL_DATABASE: ${KEYCLOAK_DB_DATABASE}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      KC_DB_SCHEMA: public
      KC_PROXY: edge
      KC_HOSTNAME: ${KEYCLOAK_DOMAIN}
      KC_HTTP_RELATIVE_PATH: /auth
      TZ: ${TZ}
    depends_on:
      - keycloak-db
    command: ["start-dev"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`${KEYCLOAK_DOMAIN}`)"
      - "traefik.http.routers.keycloak.entrypoints=https"
      - "traefik.http.routers.keycloak.tls=true"
      - "traefik.http.routers.keycloak.tls.certresolver=letsencrypt"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
      - "traefik.http.routers.keycloak.middlewares=secHeaders@docker"

  #--------------------------------------------------
  # Nextcloud Instance for Tenant 1 # --- Tenant Duplication ---
  #--------------------------------------------------
  tenant1-nextcloud-db:
    image: postgres:15-alpine
    container_name: tenant1-nextcloud-db
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - tenant1-nextcloud-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${TENANT1_NC_DB_PASSWORD}
      POSTGRES_USER: ${TENANT1_NC_DB_USER}
      POSTGRES_DB: ${TENANT1_NC_DB_NAME}

  tenant1-nextcloud-app:
    image: nextcloud:28-fpm-alpine
    container_name: tenant1-nextcloud-app
    restart: unless-stopped
    networks:
      - proxy
      - backend
    volumes:
      - tenant1-nextcloud-data:/var/www/html
      - tenant1-nextcloud-custom_apps:/var/www/html/custom_apps
      - tenant1-nextcloud-config:/var/www/html/config
      - tenant1-nextcloud-themes:/var/www/html/themes
    environment:
      POSTGRES_HOST: tenant1-nextcloud-db
      POSTGRES_DB: ${TENANT1_NC_DB_NAME}
      POSTGRES_USER: ${TENANT1_NC_DB_USER}
      POSTGRES_PASSWORD: ${TENANT1_NC_DB_PASSWORD}
      REDIS_HOST: erpnext-redis-cache
      REDIS_HOST_DB: "1"
      NEXTCLOUD_TRUSTED_PROXIES: 'traefik'
      OVERWRITEPROTOCOL: 'https'
      NEXTCLOUD_ADMIN_USER: ${TENANT1_NC_ADMIN_USER}
      NEXTCLOUD_ADMIN_PASSWORD: ${TENANT1_NC_ADMIN_PASSWORD}
      PHP_MEMORY_LIMIT: 1G
      PHP_UPLOAD_LIMIT: 10G
      TZ: ${TZ}
      ONLYOFFICE_JWT_SECRET: ${ONLYOFFICE_JWT_SECRET}
    depends_on:
      - tenant1-nextcloud-db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud-tenant1.rule=Host(`${TENANT1_NEXTCLOUD_DOMAIN}`)"
      - "traefik.http.routers.nextcloud-tenant1.entrypoints=https"
      - "traefik.http.routers.nextcloud-tenant1.tls=true"
      - "traefik.http.routers.nextcloud-tenant1.tls.certresolver=letsencrypt"
      - "traefik.http.services.nextcloud-tenant1-svc.loadbalancer.server.port=9000"
      - "traefik.http.middlewares.nextcloud-tenant1-redirect.redirectregex.regex=https://(.*)/.well-known/(card|cal)dav"
      - "traefik.http.middlewares.nextcloud-tenant1-redirect.redirectregex.replacement=https://$$1/remote.php/dav/"
      - "traefik.http.middlewares.nextcloud-tenant1-redirect.redirectregex.permanent=true"
      - "traefik.http.routers.nextcloud-tenant1.middlewares=secHeaders@docker,nextcloud-tenant1-redirect@docker"

  #--------------------------------------------------
  # OnlyOffice Document Server (Shared Instance)
  #--------------------------------------------------
  onlyoffice-docs:
    image: onlyoffice/documentserver:latest
    container_name: onlyoffice-docs
    restart: unless-stopped
    networks:
      - proxy
      - backend
    volumes:
      - onlyoffice-data:/var/www/onlyoffice/Data
      - onlyoffice-logs:/var/log/onlyoffice
    environment:
      JWT_ENABLED: "true"
      JWT_SECRET: ${ONLYOFFICE_JWT_SECRET}
      TZ: ${TZ}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.onlyoffice.rule=Host(`${ONLYOFFICE_DOMAIN}`)"
      - "traefik.http.routers.onlyoffice.entrypoints=https"
      - "traefik.http.routers.onlyoffice.tls=true"
      - "traefik.http.routers.onlyoffice.tls.certresolver=letsencrypt"
      - "traefik.http.services.onlyoffice.loadbalancer.server.port=80"
      - "traefik.http.routers.onlyoffice.middlewares=secHeaders@docker"

  #--------------------------------------------------
  # n8n (Shared Instance)
  #--------------------------------------------------
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    networks:
      - proxy
      - backend
    ports:
      - "127.0.0.1:5678:5678"
    volumes:
      - n8n-data:/home/node/.n8n
    environment:
      N8N_HOST: ${N8N_DOMAIN}
      N8N_PORT: 5678
      N8N_PROTOCOL: https
      NODE_ENV: production
      WEBHOOK_URL: https://${N8N_DOMAIN}/
      GENERIC_TIMEZONE: ${TZ}
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`${N8N_DOMAIN}`)"
      - "traefik.http.routers.n8n.entrypoints=https"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.http.routers.n8n.middlewares=secHeaders@docker"

  #--------------------------------------------------
  # Ollama (AI Model Server)
  #--------------------------------------------------
  ollama-server:
    image: ollama/ollama:latest
    container_name: ollama-server
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - ollama-data:/root/.ollama
    environment:
      OLLAMA_HOST: '0.0.0.0'
      TZ: ${TZ}

  #--------------------------------------------------
  # Open WebUI (Frontend for Ollama)
  #--------------------------------------------------
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    restart: unless-stopped
    networks:
      - proxy
      - backend
    volumes:
      - open-webui-data:/app/backend/data
    environment:
      OLLAMA_BASE_URL: 'http://ollama:11434'
      TZ: ${TZ}
    depends_on:
      - ollama-server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.openwebui.rule=Host(`${OPENWEBUI_DOMAIN}`)"
      - "traefik.http.routers.openwebui.entrypoints=https"
      - "traefik.http.routers.openwebui.tls=true"
      - "traefik.http.routers.openwebui.tls.certresolver=letsencrypt"
      - "traefik.http.services.openwebui.loadbalancer.server.port=8080"
      - "traefik.http.routers.openwebui.middlewares=secHeaders@docker"